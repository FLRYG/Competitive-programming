<<ABC>>
    C - GCD on Blackboard               累積和？
    C - Typical Stairs                  dpを使う問題
    C - Triangular Relationship         必要十分条件を見極める
    C - Synthetic Kadomatsu             全　探　索
    C - All Green                       O(2^N*N)で解く
    C - Many Requirements               全探索、深さ優先探索                    ***
    C - Strange Bank                    動的計画法　テンプレ
    C - Sugar Water                     制約に注目                  ***
    C - 正直者の高橋くん                 ワーシャルフロイド法＋幅優先探索
    C - Super Ryuma                     座標変換、条件分岐
    D - Face Produces Unhappiness       同じ向きを向いていると幸せな問題
    D - String Formation                二つのstringをうまく使う問題
    D - Handstand                       条件分岐が複雑
    D - XOR World                       xorの性質を使う
    D - Christmas                       再　帰
    D - Lunlun Number                   queueを使う
    D - Even Relation                   木
    D - Digits Parade                   動的計画法　テンプレ
    D - We Like AGC                     動的計画法　頑張る
    D - Decayed Bridges                 Union_Find
    D - AtCoder Express 2               累積和
    D - Sum of Divisors                 割らない　ピラミッド
    D - Wall                            最短路
    D - Multiple of 2019                余りの性質を利用　***
    D - joisino's travel                最短路＋全探索
    D - Patisserie ABC                  絶対値の外し方
    D - Leaping Tak                     dp＋累積和
    D - 高橋くんと木の直径               木の直径
    D - increment of coins              期待値、メモ化再帰
    D - Snuke Prime                     座標圧縮＋累積和
    D - Xor Sum 4                       xor bitは独立
    E - Dividing Chocolate              全探索と貪欲法を使い分ける問題
    E - Crested Ibis vs Monster         dp
    E - Almost Everywhere Zero          dp
    E - Logs                            二分探索
    E - Coprime                         素因数分解？
    E - Count Median                    範囲
    E - Colorful Blocks                 組み合わせ
    E - Roaming                         組み合わせ

    E - Rotate and Flip                 アフィン変換                   
    D - Logical Expression              dp              ***
    D - Restoring Road Network          O(N^3)
    E - ∙ (Bullet)                      速
    E - Get Everything                  bitDP
    D - Base n                          二分探索　掛け算のオーバーフローに注意
    E - Traveling Salesman among Aerial Cities      TSP(BitDP)
    E - Magical Ornament                Dijkstra + TSP(BitDP)


<<ARC>>
    D - Remainder Reminder              余りの問題
    B - ムーアの法則                    三分探索、二分法
    D - アンバランス                    鳩ノ巣原理
    C - Exoswap                         愚直
    A - Simple Math 2                   式変形
    C - Sequence                        貪欲
    D - Xor Sum 2                       足し算とxorの関係
    B - Abbreviate Fox                  stack?

<<AGC>>
    A - Diverse Word                    辞書順
    A - Pay to Win                      メモ化再帰
    B - Reverse and Compare             リバースさせるべき部分を考える ***
    B - Unplanned Queries               パリティ
    B - Joker                           bfs

<<other>>
    B - Two Arrays                      考察
    C - Different Strokes               間接的な計算
    C - 説明会                          ソート・条件
    C - Folia                           貪欲法・条件(不等式の利用)　***
    C - Successive Subtraction          アルゴリズムを考える
    C - Lamps                           計算量見積り
    C - Strawberry Cakes                再帰
    D - Anything Goes to Zero           余り
    C - 錬金術士                        範囲
    B - エターナルスタティックファイナル  dp
    B - Numbers on Papers               dp　速
    J - Sushi                           期待値　メモ化再帰
    M - Candies                         dp+累積和　がんばって漸化式をつくる


Overflow

3.14159'26535'89793                     円周率

cout<<fixed<<setprecision(1);           浮動小数点数を出力する精度を設定する

priority_queue<T>                       優先順位付きキュー（降順）

priority_queue<T,
    vector<T>,greater<T>>               優先順位付きキュー（昇順）

unordered_map<Key,T>                    hash map　のこと

string t;int n=atoi(t.c_str());         string から int の変換

sort(B,B+N,greater<>());                降順ソート

char S[140]; cin.getline(S,sizeof(S));  空白を含む文をそのまま入力

string S; cin.ignore(); getline(cin,S); 空白を含む文をそのまま入力(その2)

lower

a/b の切り上げは (a+(b-1))/b

./a.out < in.txt                        ./a.out の標準入力を in.txt から読み込む
./a.out > out.txt                       ./a.out の標準出力を out.txt に書き込む(先頭から)
./a.out >> out.txt                      ./a.out の標準出力を out.txt に書き込む(末尾から)


<<典型的問題>>
    C - 列                              尺取り法
    C - 身体バランス                    ダイクストラ法
    D - Knapsack 1                      ナップザック問題
    E - Knapsack 2                      ナップザック問題
    F - LCS                             最長共通部分列問題
    E - Logs                            二分探索


<<再1>>
    C - Repsept
    E - 常ならずグラフ
    D - Multiple of 2019
    E - Count Median
    E - Logs
    B - Backfront
    E - Strings of Impurity
    C - 列
    D - Anything Goes to Zero
    B - ヘイホー君と削除
    E - Sequence Decomposing
    E - Coprime
    D - Patisserie ABC
    D - アンバランス
    A - Integer Product
    D - Wizard in Maze
    C - 錬金術士
    E - Colorful Blocks
    D - Recording
    B - Ice Rink Game
    D - Crossing
    B - エターナルスタティックファイナル
    C - 身体バランス
    D - 経路
    D - Leaping Tak
    E - Lamps
    C - 正直者の高橋くん
    B - 大事な数なのでZ回書きまLた。
    D - Hachi                           speed
    A - Pay to Win
    C - Exoswap
    D - Equal Cut                       speed
    E - Roaming

<<再2>>
    D - Practical Skill Test
    B - Reversi
    D - Menagerie
    D - joisino's travel
    D - equeue
    E - 1 or 2

